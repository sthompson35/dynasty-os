[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, it must be a valid Python timezone identifier.
# (e.g. US/Eastern, Europe/Paris)
timezone = UTC

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment file as a
# standalone script, false to use 'exec' mode
# standalone_mode = false

# enable logging file rotation.
# max bytes to keep in a single log file
# if rotation is enabled
# logfile_max_bytes = 100000

# number of log files to keep
# if rotation is enabled
# logfile_rotate_count = 10

# revision environment configuration
# (this setting is revised for async support as of Alembic 1.13)
revision_environment = false

# enable bracket quoting of identifiers
# (usually enabled by default)
# sqlalchemy.urlquote = true

# set the URL to the database
# (this will be overridden by the DATABASE_URL environment variable)
sqlalchemy.url = sqlite:///./test.db

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the script
# file and directory
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatters]
keys = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic
